import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, ParseMode
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import keyboards as kb
from states import Form
from loader import dp, bot, _, __
from lang import LANGS, LANG_STORAGE, Localization
from language import lang_text

logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(_("–°–∞–≤–¥–æ-–°–∞–Ω–æ–∞—Ç –ø–∞–ª–∞—Ç–∞—Å–∏ –¢–æ—à–∫–µ–Ω—Ç –≤–∏–ª–æ—è—Ç–∏ –•—É–¥—É–¥–∏–π –±–æ—à“õ–∞—Ä–º–∞—Å–∏–Ω–∏–Ω–≥ —Ä–∞—Å–º–∏–π –±–æ—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑",
        ).format(user=message.from_user.full_name), reply_markup=kb.mainmenu)

@dp.message_handler(commands="lang")
async def cmd_lang(message: types.Message):
    await message.answer(_("–°–∏–∑–Ω–∏–Ω–≥ —Ç–∏–ª–∏–Ω–≥–∏–∑: <i>{language}</i>").format(language=locale))

@dp.message_handler(commands=['set'])
async def cmd_setlang(message: types.Message):
    lang = message.get_args()
    if not lang:
        return await message.answer(_("–¢–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥.\n–ú–∏—Å–æ–ª —É—á—É–Ω: /setlang en"))
    if lang not in LANGS:
        return await message.answer(_("–ë—É —Ç–∏–ª –º–∞–≤–∂—É–¥ —ç–º–∞—Å!"))

    LANG_STORAGE[message.from_user.id] = lang
    await message.answer(_("–¢–∏–ª —Å–æ–∑–ª–∞–Ω–¥–∏", locale=lang))

@dp.message_handler(text=["üë§ –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞","üë§ –û –Ω–∞—Å", "üë§ About us"])
async def sahifa(message: types.Message):
    if message.text == "üë§ –ë–∏–∑ “≥–∞“õ–∏–º–∏–∑–¥–∞":
        await message.answer(lang_text[1], reply_markup=kb.mainmenu)
    elif message.text == "üë§ –û –Ω–∞—Å":
        await message.answer(lang_text[5], reply_markup=kb.mainmenu)
    elif message.text == "üë§ About us":
        await message.answer(lang_text[10], reply_markup=kb.mainmenu)

@dp.message_handler(text_startswith=_('‚úÖ –•–∏–∑–º–∞—Ç —Ç—É—Ä–ª–∞—Ä–∏'), state=None)
async def start(msg: types.Message):
    await msg.answer(_("–ò—à —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:"), reply_markup=kb.ish)
    await Form.ish.set()

@dp.message_handler(lambda message: message.text not in ["‚úÖ Types of services", "Export assistance", "Exhibition", "Preparation of a business plan", "Legal issues", "‚úÖ –í–∏–¥—ã —É—Å–ª—É–≥", "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞", "–í—ã—Å—Ç–∞–≤–∫–∏", "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "‚úÖ –•–∏–∑–º–∞—Ç —Ç—É—Ä–ª–∞—Ä–∏", "–Æ—Ä–∏–¥–∏–∫ –º–∞—Å–∞–ª–∞–ª–∞—Ä", "–≠–∫—Å–ø–æ—Ä—Ç–≥–∞ –∫—û–º–∞–∫–ª–∞—à–∏—à", "–ö—û—Ä–≥–∞–∑–º–∞", "–ë–∏–∑–Ω–µ—Å —Ä–µ–∂–∞ —Ç–∞–π—ë—Ä–ª–∞—à"], state=Form.ish)
async def ish_invalid(message: types.Message, state: FSMContext):
    if message.text == _("üîô –û—Ä“õ–∞–≥–∞"):
        await state.finish()
        await message.answer(_("–ë–æ—à —Å–∞“≥–∏—Ñ–∞"), reply_markup=kb.mainmenu)
    else:
        return await message.reply(_("–ö–Ω–æ–ø–∫–∞–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥!"))

@dp.message_handler(state='*', text_startswith=[_('üîô –û—Ä“õ–∞–≥–∞')])
@dp.message_handler(Text(equals=('cancel'), ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
  
    await message.reply(_('–ê—Ä–∏–∑–∞ –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏!'), reply_markup=kb.mainmenu)

@dp.message_handler(state=Form.ish)
async def ish(msg: types.Message, state:FSMContext):
    ish=msg.text
    if ish == "–≠–∫—Å–ø–æ—Ä—Ç–≥–∞ –∫—û–º–∞–∫–ª–∞—à–∏—à":
        await msg.reply_photo("https://t.me/rasmlarpalata/31")
        await msg.answer(lang_text[1])
    elif ish == "–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞":
        await msg.reply_photo("https://t.me/rasmlarpalata/31")
        await msg.answer(lang_text[6])
    elif ish == "Export assistance":
        await msg.reply_photo("https://t.me/rasmlarpalata/31")
        await msg.answer(lang_text[11])

    if ish == "–ö—û—Ä–≥–∞–∑–º–∞":
        await msg.reply_photo("https://t.me/rasmlarpalata/33")
        await msg.answer(lang_text[2])
    elif ish == "–í—ã—Å—Ç–∞–≤–∫–∏":
        await msg.reply_photo("https://t.me/rasmlarpalata/33")
        await msg.answer(lang_text[7])
    elif ish == "Exhibition":
        await msg.reply_photo("https://t.me/rasmlarpalata/33")
        await msg.answer(lang_text[12])
    
    if ish == "–ë–∏–∑–Ω–µ—Å —Ä–µ–∂–∞ —Ç–∞–π—ë—Ä–ª–∞—à":
        await msg.reply_photo("https://t.me/rasmlarpalata/37")
        await msg.answer(lang_text[3])
    elif ish == "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω":
        await msg.reply_photo("https://t.me/rasmlarpalata/37")
        await msg.answer(lang_text[8])
    elif ish == "Preparation of a business plan":
        await msg.reply_photo("https://t.me/rasmlarpalata/37")
        await msg.answer(lang_text[13])

    if ish == "–Æ—Ä–∏–¥–∏–∫ –º–∞—Å–∞–ª–∞–ª–∞—Ä":
        await msg.reply_photo("https://t.me/rasmlarpalata/35")
        await msg.answer(lang_text[4])
    elif ish == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã":
        await msg.reply_photo("https://t.me/rasmlarpalata/35")
        await msg.answer(lang_text[9])
    elif ish == "Legal issues":
        await msg.reply_photo("https://t.me/rasmlarpalata/35")
        await msg.answer(lang_text[14])

    await state.update_data({'ish':ish})
    await msg.answer(_("–ê—Ä–∏–∑–∞ “õ–æ–ª–¥–∏—Ä–∏—à–Ω–∏ –∏—Å—Ç–∞–π—Å–∏–∑–º–∏?"), reply_markup=kb.ariza)
    await Form.next()

@dp.message_handler(state=Form.ar)
async def ar(msg: types.Message, state:FSMContext):
    ar=msg.text
    if ar == _("üìù –ê—Ä–∏–∑–∞ “õ–æ–ª–¥–∏—Ä–∏—à"):
        await msg.answer(_("–ò—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"), reply_markup=kb.Main)
        await Form.next()

@dp.message_handler(state=Form.ism)
async def ism(msg: types.Message, state:FSMContext):
    ism=msg.text
    await state.update_data({'ism':ism})
    await msg.answer(_("–§–∏—Ä–º–∞–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–∏–∫ –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"), reply_markup=kb.Main)
    await Form.next()

@dp.message_handler(state=Form.firma)
async def firma(msg: types.Message, state:FSMContext):
    firma=msg.text
    await state.update_data({'firma':firma})
    await msg.answer(_("(STIR)–ò–ù–ù —Ä–∞“õ–∞–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:"), reply_markup=kb.Main)
    await Form.next()

@dp.message_handler(lambda message: not len(message.text) == 9, state=Form.inn)
async def inn_invalid(message: types.Message):
    return await message.reply(_("(STIR)–ò–ù–ù —Ä–∞“õ–∞–º–∏ –Ω–æ—Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–∏–ª–¥–∏!"))

@dp.message_handler(lambda message: message.text.isdigit(), state=Form.inn)
async def inn(msg: types.Message, state:FSMContext):
    inn=msg.text
    await state.update_data({'inn':inn})
    await msg.answer(_("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥: –ú–∏—Å–æ–ª —É—á—É–Ω: +9989********"), reply_markup=kb.Main)
    await Form.next()

@dp.message_handler(lambda message: not len(message.text) == 13, state=Form.tel)
async def tel_invalid(message: types.Message):
    return await message.reply(_("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ –Ω–æ—Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–∏–ª–¥–∏! –ò–ª—Ç–∏–º–æ—Å —Ä–∞“õ–∞–º–Ω–∏ —Ç—û–ª–∏“õ –∫–∏—Ä–∏—Ç–∏–Ω–≥"))

count = 0
@dp.message_handler(lambda message: message.text, state=Form.tel)
async def tel(msg: types.Message, state:FSMContext):
    tel=msg.text
    global count
    #await state.update_data(tel=int(msg.text))
    await state.update_data({'tel':tel})
    data = await state.get_data()
    count += 1

    xabar = (f"‚Ññ: <b>{count}</b>\n"
            f"–•–∏–∑–º–∞—Ç —Ç—É—Ä–∏: <b>{data['ish']}</b>\n"
            f"–ò—Å–º–∏: <b>{data['ism']}</b>\n"
            f"–§–∏—Ä–º–∞ –Ω–æ–º–∏: <b>{data['firma']}</b>\n"
            f"–ò–Ω–Ω —Ä–∞“õ–∞–º–∏: <b>{data['inn']}</b>\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏: <b>{data['tel']}</b>\n")
    await bot.send_message(chat_id=-1001746692435, text=xabar)
    await msg.answer(_("‚úÖ –ê—Ä–∏–∑–∞–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏, —Ç–µ–∑ –æ—Ä–∞–¥–∞ –∞–ª–æ“õ–∞–≥–∞ —á–∏“õ–∏–ª–∞–¥–∏"), reply_markup=kb.mainmenu)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
